/* 
 * File:   EulerP2.cpp
 * Author: Konstantin Kazantsev
 * CSCI 372.2 C++
 *
 * Created on January 30, 2015, 12:05 PM
 * 
 * Euler Problem 2:
 * Each new term in the Fibonacci sequence is generated by adding the previous 
 * two terms. By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not 
 * exceed four million, find the sum of the even-valued terms.
 */

#include <cstdlib>
#include <iostream>

using namespace std;

void getSum(){
    long numb1 = 0;
    long numb2 = 1;
    long sum = 0;
    while ((numb1+numb2) < 4000000){
        long value = numb1 + numb2;
        cout << value << endl;
        if (value%2 == 0){
            sum += value;
        }
        numb2 = numb1;
        numb1 = value;
    }
    cout << "Sum of even even values is: " << sum << endl;
}

int main(int argc, char** argv) {
    long n1 = 1;
    long n2 = 2;
    long n3 = 0;
    long sum = 2;

    cout << n1 << endl;
    cout << n2 << endl;
    while ((n2+n1) < 4000000) {
        long n3 = n1 + n2;
        if (n3%2 == 0){
            sum += n3;
        }
        cout << n3 << endl;
        n1 = n2;
        n2 = n3;  
    }
    cout << "The sum of even valued terms is: " << sum << endl;
    
    /*
     * Now using a function
     */
    getSum();

    return 0;
}

